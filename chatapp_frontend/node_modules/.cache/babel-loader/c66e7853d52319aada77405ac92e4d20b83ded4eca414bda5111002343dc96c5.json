{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst binary_js_1 = require(\"./binary.js\");\nconst is_binary_js_1 = require(\"./is-binary.js\");\nconst debug_1 = require(\"debug\"); // debug()\nconst debug = (0, debug_1.default)(\"socket.io-parser\"); // debug()\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nclass Encoder {\n  /**\n   * Encoder constructor\n   *\n   * @param {function} replacer - custom replacer to pass down to JSON.parse\n   */\n  constructor(replacer) {\n    this.replacer = replacer;\n  }\n  /**\n   * Encode a packet as a single string if non-binary, or as a\n   * buffer sequence, depending on packet type.\n   *\n   * @param {Object} obj - packet object\n   */\n  encode(obj) {\n    debug(\"encoding packet %j\", obj);\n    if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n      if ((0, is_binary_js_1.hasBinary)(obj)) {\n        return this.encodeAsBinary({\n          type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n          nsp: obj.nsp,\n          data: obj.data,\n          id: obj.id\n        });\n      }\n    }\n    return [this.encodeAsString(obj)];\n  }\n  /**\n   * Encode packet as string.\n   */\n  encodeAsString(obj) {\n    // first is type\n    let str = \"\" + obj.type;\n    // attachments if we have them\n    if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n      str += obj.attachments + \"-\";\n    }\n    // if we have a namespace other than `/`\n    // we append it followed by a comma `,`\n    if (obj.nsp && \"/\" !== obj.nsp) {\n      str += obj.nsp + \",\";\n    }\n    // immediately followed by the id\n    if (null != obj.id) {\n      str += obj.id;\n    }\n    // json data\n    if (null != obj.data) {\n      str += JSON.stringify(obj.data, this.replacer);\n    }\n    debug(\"encoded %j as %s\", obj, str);\n    return str;\n  }\n  /**\n   * Encode packet as 'buffer sequence' by removing blobs, and\n   * deconstructing packet into object with placeholders and\n   * a list of buffers.\n   */\n  encodeAsBinary(obj) {\n    const deconstruction = (0, binary_js_1.deconstructPacket)(obj);\n    const pack = this.encodeAsString(deconstruction.packet);\n    const buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n    return buffers; // write all the buffers\n  }\n}\nexports.Encoder = Encoder;\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nclass Decoder extends component_emitter_1.Emitter {\n  /**\n   * Decoder constructor\n   *\n   * @param {function} reviver - custom reviver to pass down to JSON.stringify\n   */\n  constructor(reviver) {\n    super();\n    this.reviver = reviver;\n  }\n  /**\n   * Decodes an encoded packet string into packet JSON.\n   *\n   * @param {String} obj - encoded packet\n   */\n  add(obj) {\n    let packet;\n    if (typeof obj === \"string\") {\n      if (this.reconstructor) {\n        throw new Error(\"got plaintext data when reconstructing a packet\");\n      }\n      packet = this.decodeString(obj);\n      const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n      if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n        packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n        // binary packet's json\n        this.reconstructor = new BinaryReconstructor(packet);\n        // no attachments, labeled binary but no binary data to follow\n        if (packet.attachments === 0) {\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else {\n        // non-binary full packet\n        super.emitReserved(\"decoded\", packet);\n      }\n    } else if ((0, is_binary_js_1.isBinary)(obj) || obj.base64) {\n      // raw binary data\n      if (!this.reconstructor) {\n        throw new Error(\"got binary data when not reconstructing a packet\");\n      } else {\n        packet = this.reconstructor.takeBinaryData(obj);\n        if (packet) {\n          // received final buffer\n          this.reconstructor = null;\n          super.emitReserved(\"decoded\", packet);\n        }\n      }\n    } else {\n      throw new Error(\"Unknown type: \" + obj);\n    }\n  }\n  /**\n   * Decode a packet String (JSON data)\n   *\n   * @param {String} str\n   * @return {Object} packet\n   */\n  decodeString(str) {\n    let i = 0;\n    // look up type\n    const p = {\n      type: Number(str.charAt(0))\n    };\n    if (PacketType[p.type] === undefined) {\n      throw new Error(\"unknown packet type \" + p.type);\n    }\n    // look up attachments if type binary\n    if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n      const start = i + 1;\n      while (str.charAt(++i) !== \"-\" && i != str.length) {}\n      const buf = str.substring(start, i);\n      if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n        throw new Error(\"Illegal attachments\");\n      }\n      p.attachments = Number(buf);\n    }\n    // look up namespace (if any)\n    if (\"/\" === str.charAt(i + 1)) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (\",\" === c) break;\n        if (i === str.length) break;\n      }\n      p.nsp = str.substring(start, i);\n    } else {\n      p.nsp = \"/\";\n    }\n    // look up id\n    const next = str.charAt(i + 1);\n    if (\"\" !== next && Number(next) == next) {\n      const start = i + 1;\n      while (++i) {\n        const c = str.charAt(i);\n        if (null == c || Number(c) != c) {\n          --i;\n          break;\n        }\n        if (i === str.length) break;\n      }\n      p.id = Number(str.substring(start, i + 1));\n    }\n    // look up json data\n    if (str.charAt(++i)) {\n      const payload = this.tryParse(str.substr(i));\n      if (Decoder.isPayloadValid(p.type, payload)) {\n        p.data = payload;\n      } else {\n        throw new Error(\"invalid payload\");\n      }\n    }\n    debug(\"decoded %s as %j\", str, p);\n    return p;\n  }\n  tryParse(str) {\n    try {\n      return JSON.parse(str, this.reviver);\n    } catch (e) {\n      return false;\n    }\n  }\n  static isPayloadValid(type, payload) {\n    switch (type) {\n      case PacketType.CONNECT:\n        return isObject(payload);\n      case PacketType.DISCONNECT:\n        return payload === undefined;\n      case PacketType.CONNECT_ERROR:\n        return typeof payload === \"string\" || isObject(payload);\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        return Array.isArray(payload);\n    }\n  }\n  /**\n   * Deallocates a parser's resources\n   */\n  destroy() {\n    if (this.reconstructor) {\n      this.reconstructor.finishedReconstruction();\n      this.reconstructor = null;\n    }\n  }\n}\nexports.Decoder = Decoder;\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n  constructor(packet) {\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\n   * Method to be called when binary data received from connection\n   * after a BINARY_EVENT packet.\n   *\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n   * @return {null | Object} returns null if more binary data is expected or\n   *   a reconstructed packet object if all buffers have been received.\n   */\n  takeBinaryData(binData) {\n    this.buffers.push(binData);\n    if (this.buffers.length === this.reconPack.attachments) {\n      // done with buffer list\n      const packet = (0, binary_js_1.reconstructPacket)(this.reconPack, this.buffers);\n      this.finishedReconstruction();\n      return packet;\n    }\n    return null;\n  }\n  /**\n   * Cleans up binary packet reconstruction variables.\n   */\n  finishedReconstruction() {\n    this.reconPack = null;\n    this.buffers = [];\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Decoder","Encoder","PacketType","protocol","component_emitter_1","require","binary_js_1","is_binary_js_1","debug_1","debug","default","RESERVED_EVENTS","constructor","replacer","encode","obj","type","EVENT","ACK","hasBinary","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","data","id","encodeAsString","str","attachments","JSON","stringify","deconstruction","deconstructPacket","pack","packet","buffers","unshift","isObject","prototype","toString","call","Emitter","reviver","add","reconstructor","Error","decodeString","isBinaryEvent","BinaryReconstructor","emitReserved","isBinary","base64","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","parse","e","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","indexOf","destroy","finishedReconstruction","reconPack","binData","push","reconstructPacket"],"sources":["C:/Users/sanjeevi/Desktop/chatapp/chatapp_frontend/node_modules/socket.io-parser/build/cjs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst binary_js_1 = require(\"./binary.js\");\nconst is_binary_js_1 = require(\"./is-binary.js\");\nconst debug_1 = require(\"debug\"); // debug()\nconst debug = (0, debug_1.default)(\"socket.io-parser\"); // debug()\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexports.protocol = 5;\nvar PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nclass Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        debug(\"encoding packet %j\", obj);\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if ((0, is_binary_js_1.hasBinary)(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        debug(\"encoded %j as %s\", obj, str);\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = (0, binary_js_1.deconstructPacket)(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\nexports.Encoder = Encoder;\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nclass Decoder extends component_emitter_1.Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if ((0, is_binary_js_1.isBinary)(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        debug(\"decoded %s as %j\", str, p);\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\nexports.Decoder = Decoder;\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = (0, binary_js_1.reconstructPacket)(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}