{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\nconst socket_1 = require(\"./socket\");\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nclass BroadcastOperator {\n  constructor(adapter, rooms = new Set(), exceptRooms = new Set(), flags = {}) {\n    this.adapter = adapter;\n    this.rooms = rooms;\n    this.exceptRooms = exceptRooms;\n    this.flags = flags;\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * io.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms (a client will be notified at most once)\n   * io.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * io.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  to(room) {\n    const rooms = new Set(this.rooms);\n    if (Array.isArray(room)) {\n      room.forEach(r => rooms.add(r));\n    } else {\n      rooms.add(room);\n    }\n    return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n  }\n  /**\n   * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n   *\n   * @example\n   * // disconnect all clients in the \"room-101\" room\n   * io.in(\"room-101\").disconnectSockets();\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  in(room) {\n    return this.to(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @example\n   * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n   * io.except(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms\n   * io.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * io.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  except(room) {\n    const exceptRooms = new Set(this.exceptRooms);\n    if (Array.isArray(room)) {\n      room.forEach(r => exceptRooms.add(r));\n    } else {\n      exceptRooms.add(room);\n    }\n    return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * io.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return a new BroadcastOperator instance\n   */\n  compress(compress) {\n    const flags = Object.assign({}, this.flags, {\n      compress\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @example\n   * io.volatile.emit(\"hello\"); // the clients may or may not receive it\n   *\n   * @return a new BroadcastOperator instance\n   */\n  get volatile() {\n    const flags = Object.assign({}, this.flags, {\n      volatile: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients on this node\n   * io.local.emit(\"foo\", \"bar\");\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  get local() {\n    const flags = Object.assign({}, this.flags, {\n      local: true\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation\n   *\n   * @example\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @param timeout\n   */\n  timeout(timeout) {\n    const flags = Object.assign({}, this.flags, {\n      timeout\n    });\n    return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n  }\n  /**\n   * Emits to all clients.\n   *\n   * @example\n   * // the “foo” event will be broadcast to all connected clients\n   * io.emit(\"foo\", \"bar\");\n   *\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * io.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an acknowledgement expected from all connected clients\n   * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @return Always true\n   */\n  emit(ev, ...args) {\n    if (socket_1.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${String(ev)}\" is a reserved event name`);\n    }\n    // set up packet object\n    const data = [ev, ...args];\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: data\n    };\n    const withAck = typeof data[data.length - 1] === \"function\";\n    if (!withAck) {\n      this.adapter.broadcast(packet, {\n        rooms: this.rooms,\n        except: this.exceptRooms,\n        flags: this.flags\n      });\n      return true;\n    }\n    const ack = data.pop();\n    let timedOut = false;\n    let responses = [];\n    const timer = setTimeout(() => {\n      timedOut = true;\n      ack.apply(this, [new Error(\"operation has timed out\"), this.flags.expectSingleResponse ? null : responses]);\n    }, this.flags.timeout);\n    let expectedServerCount = -1;\n    let actualServerCount = 0;\n    let expectedClientCount = 0;\n    const checkCompleteness = () => {\n      if (!timedOut && expectedServerCount === actualServerCount && responses.length === expectedClientCount) {\n        clearTimeout(timer);\n        ack.apply(this, [null, this.flags.expectSingleResponse ? null : responses]);\n      }\n    };\n    this.adapter.broadcastWithAck(packet, {\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, clientCount => {\n      // each Socket.IO server in the cluster sends the number of clients that were notified\n      expectedClientCount += clientCount;\n      actualServerCount++;\n      checkCompleteness();\n    }, clientResponse => {\n      // each client sends an acknowledgement\n      responses.push(clientResponse);\n      checkCompleteness();\n    });\n    this.adapter.serverCount().then(serverCount => {\n      expectedServerCount = serverCount;\n      checkCompleteness();\n    });\n    return true;\n  }\n  /**\n   * Emits an event and waits for an acknowledgement from all clients.\n   *\n   * @example\n   * try {\n   *   const responses = await io.timeout(1000).emitWithAck(\"some-event\");\n   *   console.log(responses); // one response per client\n   * } catch (e) {\n   *   // some clients did not acknowledge the event in the given delay\n   * }\n   *\n   * @return a Promise that will be fulfilled when all clients have acknowledged the event\n   */\n  emitWithAck(ev, ...args) {\n    return new Promise((resolve, reject) => {\n      args.push((err, responses) => {\n        if (err) {\n          err.responses = responses;\n          return reject(err);\n        } else {\n          return resolve(responses);\n        }\n      });\n      this.emit(ev, ...args);\n    });\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @deprecated this method will be removed in the next major release, please use {@link Server#serverSideEmit} or\n   * {@link fetchSockets} instead.\n   */\n  allSockets() {\n    if (!this.adapter) {\n      throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n    }\n    return this.adapter.sockets(this.rooms);\n  }\n  /**\n   * Returns the matching socket instances. This method works across a cluster of several Socket.IO servers.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // return all Socket instances\n   * const sockets = await io.fetchSockets();\n   *\n   * // return all Socket instances in the \"room1\" room\n   * const sockets = await io.in(\"room1\").fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   console.log(socket.id);\n   *   console.log(socket.handshake);\n   *   console.log(socket.rooms);\n   *   console.log(socket.data);\n   *\n   *   socket.emit(\"hello\");\n   *   socket.join(\"room1\");\n   *   socket.leave(\"room2\");\n   *   socket.disconnect();\n   * }\n   */\n  fetchSockets() {\n    return this.adapter.fetchSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }).then(sockets => {\n      return sockets.map(socket => {\n        if (socket instanceof socket_1.Socket) {\n          // FIXME the TypeScript compiler complains about missing private properties\n          return socket;\n        } else {\n          return new RemoteSocket(this.adapter, socket);\n        }\n      });\n    });\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   *\n   * // make all socket instances join the \"room1\" room\n   * io.socketsJoin(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n   * io.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n  socketsJoin(room) {\n    this.adapter.addSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // make all socket instances leave the \"room1\" room\n   * io.socketsLeave(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n   * io.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n  socketsLeave(room) {\n    this.adapter.delSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, Array.isArray(room) ? room : [room]);\n  }\n  /**\n   * Makes the matching socket instances disconnect.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n   * io.disconnectSockets();\n   *\n   * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n   * io.in(\"room1\").disconnectSockets(true);\n   *\n   * @param close - whether to close the underlying connection\n   */\n  disconnectSockets(close = false) {\n    this.adapter.disconnectSockets({\n      rooms: this.rooms,\n      except: this.exceptRooms,\n      flags: this.flags\n    }, close);\n  }\n}\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\nclass RemoteSocket {\n  constructor(adapter, details) {\n    this.id = details.id;\n    this.handshake = details.handshake;\n    this.rooms = new Set(details.rooms);\n    this.data = details.data;\n    this.operator = new BroadcastOperator(adapter, new Set([this.id]), new Set(), {\n      expectSingleResponse: true // so that remoteSocket.emit() with acknowledgement behaves like socket.emit()\n    });\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation.\n   *\n   * @example\n   * const sockets = await io.fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   if (someCondition) {\n   *     socket.timeout(1000).emit(\"some-event\", (err) => {\n   *       if (err) {\n   *         // the client did not acknowledge the event in the given delay\n   *       }\n   *     });\n   *   }\n   * }\n   *\n   * // note: if possible, using a room instead of looping over all sockets is preferable\n   * io.timeout(1000).to(someConditionRoom).emit(\"some-event\", (err, responses) => {\n   *   // ...\n   * });\n   *\n   * @param timeout\n   */\n  timeout(timeout) {\n    return this.operator.timeout(timeout);\n  }\n  emit(ev, ...args) {\n    return this.operator.emit(ev, ...args);\n  }\n  /**\n   * Joins a room.\n   *\n   * @param {String|Array} room - room or array of rooms\n   */\n  join(room) {\n    return this.operator.socketsJoin(room);\n  }\n  /**\n   * Leaves a room.\n   *\n   * @param {String} room\n   */\n  leave(room) {\n    return this.operator.socketsLeave(room);\n  }\n  /**\n   * Disconnects this client.\n   *\n   * @param {Boolean} close - if `true`, closes the underlying connection\n   * @return {Socket} self\n   */\n  disconnect(close = false) {\n    this.operator.disconnectSockets(close);\n    return this;\n  }\n}\nexports.RemoteSocket = RemoteSocket;","map":{"version":3,"names":["Object","defineProperty","exports","value","RemoteSocket","BroadcastOperator","socket_1","require","socket_io_parser_1","constructor","adapter","rooms","Set","exceptRooms","flags","to","room","Array","isArray","forEach","r","add","in","except","compress","assign","volatile","local","timeout","emit","ev","args","RESERVED_EVENTS","has","Error","String","data","packet","type","PacketType","EVENT","withAck","length","broadcast","ack","pop","timedOut","responses","timer","setTimeout","apply","expectSingleResponse","expectedServerCount","actualServerCount","expectedClientCount","checkCompleteness","clearTimeout","broadcastWithAck","clientCount","clientResponse","push","serverCount","then","emitWithAck","Promise","resolve","reject","err","allSockets","sockets","fetchSockets","map","socket","Socket","socketsJoin","addSockets","socketsLeave","delSockets","disconnectSockets","close","details","id","handshake","operator","join","leave","disconnect"],"sources":["C:/Users/sanjeevi/Desktop/chatapp/chatapp_frontend/node_modules/socket.io/dist/broadcast-operator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteSocket = exports.BroadcastOperator = void 0;\nconst socket_1 = require(\"./socket\");\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nclass BroadcastOperator {\n    constructor(adapter, rooms = new Set(), exceptRooms = new Set(), flags = {}) {\n        this.adapter = adapter;\n        this.rooms = rooms;\n        this.exceptRooms = exceptRooms;\n        this.flags = flags;\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * io.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms (a client will be notified at most once)\n     * io.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * io.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        const rooms = new Set(this.rooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => rooms.add(r));\n        }\n        else {\n            rooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, rooms, this.exceptRooms, this.flags);\n    }\n    /**\n     * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * // disconnect all clients in the \"room-101\" room\n     * io.in(\"room-101\").disconnectSockets();\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return this.to(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @example\n     * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     * io.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms\n     * io.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * io.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        const exceptRooms = new Set(this.exceptRooms);\n        if (Array.isArray(room)) {\n            room.forEach((r) => exceptRooms.add(r));\n        }\n        else {\n            exceptRooms.add(room);\n        }\n        return new BroadcastOperator(this.adapter, this.rooms, exceptRooms, this.flags);\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * io.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return a new BroadcastOperator instance\n     */\n    compress(compress) {\n        const flags = Object.assign({}, this.flags, { compress });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * io.volatile.emit(\"hello\"); // the clients may or may not receive it\n     *\n     * @return a new BroadcastOperator instance\n     */\n    get volatile() {\n        const flags = Object.assign({}, this.flags, { volatile: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients on this node\n     * io.local.emit(\"foo\", \"bar\");\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        const flags = Object.assign({}, this.flags, { local: true });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation\n     *\n     * @example\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        const flags = Object.assign({}, this.flags, { timeout });\n        return new BroadcastOperator(this.adapter, this.rooms, this.exceptRooms, flags);\n    }\n    /**\n     * Emits to all clients.\n     *\n     * @example\n     * // the “foo” event will be broadcast to all connected clients\n     * io.emit(\"foo\", \"bar\");\n     *\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * io.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an acknowledgement expected from all connected clients\n     * io.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @return Always true\n     */\n    emit(ev, ...args) {\n        if (socket_1.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        // set up packet object\n        const data = [ev, ...args];\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: data,\n        };\n        const withAck = typeof data[data.length - 1] === \"function\";\n        if (!withAck) {\n            this.adapter.broadcast(packet, {\n                rooms: this.rooms,\n                except: this.exceptRooms,\n                flags: this.flags,\n            });\n            return true;\n        }\n        const ack = data.pop();\n        let timedOut = false;\n        let responses = [];\n        const timer = setTimeout(() => {\n            timedOut = true;\n            ack.apply(this, [\n                new Error(\"operation has timed out\"),\n                this.flags.expectSingleResponse ? null : responses,\n            ]);\n        }, this.flags.timeout);\n        let expectedServerCount = -1;\n        let actualServerCount = 0;\n        let expectedClientCount = 0;\n        const checkCompleteness = () => {\n            if (!timedOut &&\n                expectedServerCount === actualServerCount &&\n                responses.length === expectedClientCount) {\n                clearTimeout(timer);\n                ack.apply(this, [\n                    null,\n                    this.flags.expectSingleResponse ? null : responses,\n                ]);\n            }\n        };\n        this.adapter.broadcastWithAck(packet, {\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, (clientCount) => {\n            // each Socket.IO server in the cluster sends the number of clients that were notified\n            expectedClientCount += clientCount;\n            actualServerCount++;\n            checkCompleteness();\n        }, (clientResponse) => {\n            // each client sends an acknowledgement\n            responses.push(clientResponse);\n            checkCompleteness();\n        });\n        this.adapter.serverCount().then((serverCount) => {\n            expectedServerCount = serverCount;\n            checkCompleteness();\n        });\n        return true;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement from all clients.\n     *\n     * @example\n     * try {\n     *   const responses = await io.timeout(1000).emitWithAck(\"some-event\");\n     *   console.log(responses); // one response per client\n     * } catch (e) {\n     *   // some clients did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when all clients have acknowledged the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            args.push((err, responses) => {\n                if (err) {\n                    err.responses = responses;\n                    return reject(err);\n                }\n                else {\n                    return resolve(responses);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @deprecated this method will be removed in the next major release, please use {@link Server#serverSideEmit} or\n     * {@link fetchSockets} instead.\n     */\n    allSockets() {\n        if (!this.adapter) {\n            throw new Error(\"No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?\");\n        }\n        return this.adapter.sockets(this.rooms);\n    }\n    /**\n     * Returns the matching socket instances. This method works across a cluster of several Socket.IO servers.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // return all Socket instances\n     * const sockets = await io.fetchSockets();\n     *\n     * // return all Socket instances in the \"room1\" room\n     * const sockets = await io.in(\"room1\").fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   console.log(socket.id);\n     *   console.log(socket.handshake);\n     *   console.log(socket.rooms);\n     *   console.log(socket.data);\n     *\n     *   socket.emit(\"hello\");\n     *   socket.join(\"room1\");\n     *   socket.leave(\"room2\");\n     *   socket.disconnect();\n     * }\n     */\n    fetchSockets() {\n        return this.adapter\n            .fetchSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        })\n            .then((sockets) => {\n            return sockets.map((socket) => {\n                if (socket instanceof socket_1.Socket) {\n                    // FIXME the TypeScript compiler complains about missing private properties\n                    return socket;\n                }\n                else {\n                    return new RemoteSocket(this.adapter, socket);\n                }\n            });\n        });\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     *\n     * // make all socket instances join the \"room1\" room\n     * io.socketsJoin(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n     * io.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsJoin(room) {\n        this.adapter.addSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // make all socket instances leave the \"room1\" room\n     * io.socketsLeave(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n     * io.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsLeave(room) {\n        this.adapter.delSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, Array.isArray(room) ? room : [room]);\n    }\n    /**\n     * Makes the matching socket instances disconnect.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n     * io.disconnectSockets();\n     *\n     * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n     * io.in(\"room1\").disconnectSockets(true);\n     *\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(close = false) {\n        this.adapter.disconnectSockets({\n            rooms: this.rooms,\n            except: this.exceptRooms,\n            flags: this.flags,\n        }, close);\n    }\n}\nexports.BroadcastOperator = BroadcastOperator;\n/**\n * Expose of subset of the attributes and methods of the Socket class\n */\nclass RemoteSocket {\n    constructor(adapter, details) {\n        this.id = details.id;\n        this.handshake = details.handshake;\n        this.rooms = new Set(details.rooms);\n        this.data = details.data;\n        this.operator = new BroadcastOperator(adapter, new Set([this.id]), new Set(), {\n            expectSingleResponse: true, // so that remoteSocket.emit() with acknowledgement behaves like socket.emit()\n        });\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation.\n     *\n     * @example\n     * const sockets = await io.fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   if (someCondition) {\n     *     socket.timeout(1000).emit(\"some-event\", (err) => {\n     *       if (err) {\n     *         // the client did not acknowledge the event in the given delay\n     *       }\n     *     });\n     *   }\n     * }\n     *\n     * // note: if possible, using a room instead of looping over all sockets is preferable\n     * io.timeout(1000).to(someConditionRoom).emit(\"some-event\", (err, responses) => {\n     *   // ...\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        return this.operator.timeout(timeout);\n    }\n    emit(ev, ...args) {\n        return this.operator.emit(ev, ...args);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} room - room or array of rooms\n     */\n    join(room) {\n        return this.operator.socketsJoin(room);\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     */\n    leave(room) {\n        return this.operator.socketsLeave(room);\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     */\n    disconnect(close = false) {\n        this.operator.disconnectSockets(close);\n        return this;\n    }\n}\nexports.RemoteSocket = RemoteSocket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}