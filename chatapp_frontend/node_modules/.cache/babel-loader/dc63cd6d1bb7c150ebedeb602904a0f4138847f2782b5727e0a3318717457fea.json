{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = exports.createPacketDecoderStream = exports.createPacketEncoderStream = void 0;\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\nObject.defineProperty(exports, \"encodePacket\", {\n  enumerable: true,\n  get: function () {\n    return encodePacket_js_1.encodePacket;\n  }\n});\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\nObject.defineProperty(exports, \"decodePacket\", {\n  enumerable: true,\n  get: function () {\n    return decodePacket_js_1.decodePacket;\n  }\n});\nconst commons_js_1 = require(\"./commons.js\");\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    (0, encodePacket_js_1.encodePacket)(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\nexports.encodePayload = encodePayload;\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = (0, decodePacket_js_1.decodePacket)(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n  return packets;\n};\nexports.decodePayload = decodePayload;\nfunction createPacketEncoderStream() {\n  return new TransformStream({\n    transform(packet, controller) {\n      (0, encodePacket_js_1.encodePacketToBinary)(packet, encodedPacket => {\n        const payloadLength = encodedPacket.length;\n        let header;\n        // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n        if (payloadLength < 126) {\n          header = new Uint8Array(1);\n          new DataView(header.buffer).setUint8(0, payloadLength);\n        } else if (payloadLength < 65536) {\n          header = new Uint8Array(3);\n          const view = new DataView(header.buffer);\n          view.setUint8(0, 126);\n          view.setUint16(1, payloadLength);\n        } else {\n          header = new Uint8Array(9);\n          const view = new DataView(header.buffer);\n          view.setUint8(0, 127);\n          view.setBigUint64(1, BigInt(payloadLength));\n        }\n        // first bit indicates whether the payload is plain text (0) or binary (1)\n        if (packet.data && typeof packet.data !== \"string\") {\n          header[0] |= 0x80;\n        }\n        controller.enqueue(header);\n        controller.enqueue(encodedPacket);\n      });\n    }\n  });\n}\nexports.createPacketEncoderStream = createPacketEncoderStream;\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n  return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n  if (chunks[0].length === size) {\n    return chunks.shift();\n  }\n  const buffer = new Uint8Array(size);\n  let j = 0;\n  for (let i = 0; i < size; i++) {\n    buffer[i] = chunks[0][j++];\n    if (j === chunks[0].length) {\n      chunks.shift();\n      j = 0;\n    }\n  }\n  if (chunks.length && j < chunks[0].length) {\n    chunks[0] = chunks[0].slice(j);\n  }\n  return buffer;\n}\nfunction createPacketDecoderStream(maxPayload, binaryType) {\n  if (!TEXT_DECODER) {\n    TEXT_DECODER = new TextDecoder();\n  }\n  const chunks = [];\n  let state = 0 /* READ_HEADER */;\n  let expectedLength = -1;\n  let isBinary = false;\n  return new TransformStream({\n    transform(chunk, controller) {\n      chunks.push(chunk);\n      while (true) {\n        if (state === 0 /* READ_HEADER */) {\n          if (totalLength(chunks) < 1) {\n            break;\n          }\n          const header = concatChunks(chunks, 1);\n          isBinary = (header[0] & 0x80) === 0x80;\n          expectedLength = header[0] & 0x7f;\n          if (expectedLength < 126) {\n            state = 3 /* READ_PAYLOAD */;\n          } else if (expectedLength === 126) {\n            state = 1 /* READ_EXTENDED_LENGTH_16 */;\n          } else {\n            state = 2 /* READ_EXTENDED_LENGTH_64 */;\n          }\n        } else if (state === 1 /* READ_EXTENDED_LENGTH_16 */) {\n          if (totalLength(chunks) < 2) {\n            break;\n          }\n          const headerArray = concatChunks(chunks, 2);\n          expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n          state = 3 /* READ_PAYLOAD */;\n        } else if (state === 2 /* READ_EXTENDED_LENGTH_64 */) {\n          if (totalLength(chunks) < 8) {\n            break;\n          }\n          const headerArray = concatChunks(chunks, 8);\n          const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n          const n = view.getUint32(0);\n          if (n > Math.pow(2, 53 - 32) - 1) {\n            // the maximum safe integer in JavaScript is 2^53 - 1\n            controller.enqueue(commons_js_1.ERROR_PACKET);\n            break;\n          }\n          expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n          state = 3 /* READ_PAYLOAD */;\n        } else {\n          if (totalLength(chunks) < expectedLength) {\n            break;\n          }\n          const data = concatChunks(chunks, expectedLength);\n          controller.enqueue((0, decodePacket_js_1.decodePacket)(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n          state = 0 /* READ_HEADER */;\n        }\n        if (expectedLength === 0 || expectedLength > maxPayload) {\n          controller.enqueue(commons_js_1.ERROR_PACKET);\n          break;\n        }\n      }\n    }\n  });\n}\nexports.createPacketDecoderStream = createPacketDecoderStream;\nexports.protocol = 4;","map":{"version":3,"names":["Object","defineProperty","exports","value","decodePayload","decodePacket","encodePayload","encodePacket","protocol","createPacketDecoderStream","createPacketEncoderStream","encodePacket_js_1","require","enumerable","get","decodePacket_js_1","commons_js_1","SEPARATOR","String","fromCharCode","packets","callback","length","encodedPackets","Array","count","forEach","packet","i","encodedPacket","join","encodedPayload","binaryType","split","decodedPacket","push","type","TransformStream","transform","controller","encodePacketToBinary","payloadLength","header","Uint8Array","DataView","buffer","setUint8","view","setUint16","setBigUint64","BigInt","data","enqueue","TEXT_DECODER","totalLength","chunks","reduce","acc","chunk","concatChunks","size","shift","j","slice","maxPayload","TextDecoder","state","expectedLength","isBinary","headerArray","byteOffset","getUint16","n","getUint32","Math","pow","ERROR_PACKET","decode"],"sources":["C:/Users/sanjeevi/Desktop/chatapp/chatapp_frontend/node_modules/engine.io-parser/build/cjs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = exports.createPacketDecoderStream = exports.createPacketEncoderStream = void 0;\nconst encodePacket_js_1 = require(\"./encodePacket.js\");\nObject.defineProperty(exports, \"encodePacket\", { enumerable: true, get: function () { return encodePacket_js_1.encodePacket; } });\nconst decodePacket_js_1 = require(\"./decodePacket.js\");\nObject.defineProperty(exports, \"decodePacket\", { enumerable: true, get: function () { return decodePacket_js_1.decodePacket; } });\nconst commons_js_1 = require(\"./commons.js\");\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        (0, encodePacket_js_1.encodePacket)(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nexports.encodePayload = encodePayload;\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = (0, decodePacket_js_1.decodePacket)(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexports.decodePayload = decodePayload;\nfunction createPacketEncoderStream() {\n    return new TransformStream({\n        transform(packet, controller) {\n            (0, encodePacket_js_1.encodePacketToBinary)(packet, encodedPacket => {\n                const payloadLength = encodedPacket.length;\n                let header;\n                // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n                if (payloadLength < 126) {\n                    header = new Uint8Array(1);\n                    new DataView(header.buffer).setUint8(0, payloadLength);\n                }\n                else if (payloadLength < 65536) {\n                    header = new Uint8Array(3);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 126);\n                    view.setUint16(1, payloadLength);\n                }\n                else {\n                    header = new Uint8Array(9);\n                    const view = new DataView(header.buffer);\n                    view.setUint8(0, 127);\n                    view.setBigUint64(1, BigInt(payloadLength));\n                }\n                // first bit indicates whether the payload is plain text (0) or binary (1)\n                if (packet.data && typeof packet.data !== \"string\") {\n                    header[0] |= 0x80;\n                }\n                controller.enqueue(header);\n                controller.enqueue(encodedPacket);\n            });\n        }\n    });\n}\nexports.createPacketEncoderStream = createPacketEncoderStream;\nlet TEXT_DECODER;\nfunction totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n}\nfunction concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n        return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n        buffer[i] = chunks[0][j++];\n        if (j === chunks[0].length) {\n            chunks.shift();\n            j = 0;\n        }\n    }\n    if (chunks.length && j < chunks[0].length) {\n        chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n}\nfunction createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n        TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n        transform(chunk, controller) {\n            chunks.push(chunk);\n            while (true) {\n                if (state === 0 /* READ_HEADER */) {\n                    if (totalLength(chunks) < 1) {\n                        break;\n                    }\n                    const header = concatChunks(chunks, 1);\n                    isBinary = (header[0] & 0x80) === 0x80;\n                    expectedLength = header[0] & 0x7f;\n                    if (expectedLength < 126) {\n                        state = 3 /* READ_PAYLOAD */;\n                    }\n                    else if (expectedLength === 126) {\n                        state = 1 /* READ_EXTENDED_LENGTH_16 */;\n                    }\n                    else {\n                        state = 2 /* READ_EXTENDED_LENGTH_64 */;\n                    }\n                }\n                else if (state === 1 /* READ_EXTENDED_LENGTH_16 */) {\n                    if (totalLength(chunks) < 2) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 2);\n                    expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n                    state = 3 /* READ_PAYLOAD */;\n                }\n                else if (state === 2 /* READ_EXTENDED_LENGTH_64 */) {\n                    if (totalLength(chunks) < 8) {\n                        break;\n                    }\n                    const headerArray = concatChunks(chunks, 8);\n                    const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n                    const n = view.getUint32(0);\n                    if (n > Math.pow(2, 53 - 32) - 1) {\n                        // the maximum safe integer in JavaScript is 2^53 - 1\n                        controller.enqueue(commons_js_1.ERROR_PACKET);\n                        break;\n                    }\n                    expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n                    state = 3 /* READ_PAYLOAD */;\n                }\n                else {\n                    if (totalLength(chunks) < expectedLength) {\n                        break;\n                    }\n                    const data = concatChunks(chunks, expectedLength);\n                    controller.enqueue((0, decodePacket_js_1.decodePacket)(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n                    state = 0 /* READ_HEADER */;\n                }\n                if (expectedLength === 0 || expectedLength > maxPayload) {\n                    controller.enqueue(commons_js_1.ERROR_PACKET);\n                    break;\n                }\n            }\n        }\n    });\n}\nexports.createPacketDecoderStream = createPacketDecoderStream;\nexports.protocol = 4;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}