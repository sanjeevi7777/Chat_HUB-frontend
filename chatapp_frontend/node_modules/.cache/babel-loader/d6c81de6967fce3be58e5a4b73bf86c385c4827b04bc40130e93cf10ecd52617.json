{"ast":null,"code":"'use strict';\n\nconst {\n  Duplex\n} = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n  ws.on('message', function message(msg, isBinary) {\n    const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n    if (!duplex.push(data)) ws.pause();\n  });\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n    duplex.push(null);\n  });\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n    let called = false;\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n    if (terminateOnDestroy) ws.terminate();\n  };\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n    ws.send(chunk, callback);\n  };\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\nmodule.exports = createWebSocketStream;","map":{"version":3,"names":["Duplex","require","emitClose","stream","emit","duplexOnEnd","destroyed","_writableState","finished","destroy","duplexOnError","err","removeListener","listenerCount","createWebSocketStream","ws","options","terminateOnDestroy","duplex","autoDestroy","objectMode","writableObjectMode","on","message","msg","isBinary","data","_readableState","toString","push","pause","once","error","close","_destroy","callback","readyState","CLOSED","process","nextTick","called","terminate","_final","CONNECTING","open","_socket","endEmitted","finish","_read","isPaused","resume","_write","chunk","encoding","send","module","exports"],"sources":["C:/Users/sanjeevi/Desktop/chatapp/chatapp_frontend/node_modules/engine.io/node_modules/ws/lib/stream.js"],"sourcesContent":["'use strict';\n\nconst { Duplex } = require('stream');\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}